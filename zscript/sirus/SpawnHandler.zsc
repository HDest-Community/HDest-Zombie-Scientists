// Struct for Enemyspawn information.
class ZSCSpawnEnemy play {

    // ID by string for spawner
    string spawnName;

    // ID by string for spawnees
    Array<ZSCSpawnEnemyEntry> spawnReplaces;

    // Whether or not to persistently spawn.
    bool isPersistent;

    // Whether or not to replace the original enemy
    bool replaceEnemy;

    string toString() {

        let replacements = "[";

        foreach (spawnReplace : spawnReplaces) replacements = replacements..", "..spawnReplace.toString();

        replacements = replacements.."]";

        return String.format("{ spawnName=%s, spawnReplaces=%s, isPersistent=%b, replaceEnemy=%b }", spawnName, replacements, isPersistent, replaceEnemy);
    }
}

class ZSCSpawnEnemyEntry play {

    string name;
    int    chance;

    string toString() {
        return String.format("{ name=%s, chance=%s }", name, chance >= 0 ? "1/"..(chance + 1) : "never");
    }
}

// One handler to rule them all.
class ZombieScientistHandler : EventHandler {
    // List of persistent classes to completely ignore.
    // This -should- mean this mod has no performance impact.
    static const string blacklist[] = {
        'HDSmoke',
        'BloodTrail',
        'CheckPuff',
        'WallChunk',
        'HDBulletPuff',
        'HDFireballTail',
        'ReverseImpBallTail',
        'HDSmokeChunk',
        'ShieldSpark',
        'HDFlameRed',
        'HDMasterBlood',
        'PlantBit',
        'HDBulletActor',
        'HDLadderSection'
    };

    // List of Enemy-spawn associations.
    // used for Enemy-replacement on mapload.
    array<ZSCSpawnEnemy> EnemySpawnList;

    bool cvarsAvailable;

    // appends an entry to Enemyspawnlist;
    void addEnemy(string name, Array<ZSCSpawnEnemyEntry> replacees, bool persists, bool rep=true) {

        if (hd_debug) {

            let msg = "Adding "..(persists ? "Persistent" : "Non-Persistent").." Replacement Entry for "..name..": [";

            foreach (replacee : replacees) msg = msg..", "..replacee.toString();

            console.printf(msg.."]");
        }

        // Creates a new struct;
        ZSCSpawnEnemy spawnee = ZSCSpawnEnemy(new('ZSCSpawnEnemy'));

        // Populates the struct with relevant information,
        spawnee.spawnName = name;
        spawnee.isPersistent = persists;
        spawnee.replaceEnemy = rep;
        spawnee.spawnReplaces.copy(replacees);

        // Pushes the finished struct to the array.
        enemySpawnList.push(spawnee);
    }

    ZSCSpawnEnemyEntry addEnemyEntry(string name, int chance) {

        // Creates a new struct;
        ZSCSpawnEnemyEntry spawnee = ZSCSpawnEnemyEntry(new('ZSCSpawnEnemyEntry'));
        spawnee.name = name;
        spawnee.chance = chance;
        return spawnee;
    }

    // Populates the replacement and association arrays.
    void init() {

        cvarsAvailable = true;

        // --------------------
        // Enemy spawn lists.
        // --------------------

        // Zombie Scientists
        Array<ZSCSpawnEnemyEntry> spawns_zombiesci;
        spawns_zombiesci.push(addEnemyEntry('Zombieman', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('ZombieSemiStormtrooper', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('ZombieAutoStormtrooper', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('ZombieSMGStormtrooper', zombiesci_zombieman_spawn_bias));
        spawns_zombiesci.push(addEnemyEntry('ShotgunGuy', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('Jackboot', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('JackAndJillboot', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('UndeadJackbootman', zombiesci_shotgunguy_spawn_bias));
        spawns_zombiesci.push(addEnemyEntry('DoomImp', zombiesci_imp_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('Serpentipede', zombiesci_imp_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('Ardentipede', zombiesci_imp_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('Regentipede', zombiesci_imp_spawn_bias));
        spawns_zombiesci.push(addEnemyEntry('Demon', zombiesci_demon_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('Babuin', zombiesci_demon_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('SpecBabuin', zombiesci_demon_spawn_bias));
        // spawns_zombiesci.push(addEnemyEntry('NinjaPirate', zombiesci_demon_spawn_bias));
        spawns_zombiesci.push(addEnemyEntry('HDCasingBits', zombiesci_casings_spawn_bias));
        spawns_zombiesci.push(addEnemyEntry('HDGoreBits', zombiesci_gore_spawn_bias));
        spawns_zombiesci.push(addEnemyEntry('HelmFrag', zombiesci_helmfrag_spawn_bias));
        spawns_zombiesci.push(addEnemyEntry('BlueFrag', zombiesci_bluefrag_spawn_bias));
        addEnemy('ZombieCivilian', spawns_zombiesci, zombiesci_persistent_spawning);

        // Zombie Scientist Corpses
        Array<ZSCSpawnEnemyEntry> spawns_zombiescicorpse;
        spawns_zombiescicorpse.push(addEnemyEntry('HDCasingBits', zombiescicorpse_casings_spawn_bias));
        spawns_zombiescicorpse.push(addEnemyEntry('HDGoreBits', zombiescicorpse_gore_spawn_bias));
        spawns_zombiescicorpse.push(addEnemyEntry('HelmFrag', zombiescicorpse_helmfrag_spawn_bias));
        spawns_zombiescicorpse.push(addEnemyEntry('BlueFrag', zombiescicorpse_bluefrag_spawn_bias));
        addEnemy('Dead_HumanVictim', spawns_zombiescicorpse, zombiescicorpse_persistent_spawning);

        // // Zombie Scientists
        // Array<ZSCSpawnEnemyEntry> spawns_zombiesci_cleaver;
        // spawns_zombiesci_cleaver.push(addEnemyEntry('Zombieman', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci_cleaver.push(addEnemyEntry('ShotgunGuy', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci_cleaver.push(addEnemyEntry('DoomImp', zombiesci_imp_spawn_bias));
        // spawns_zombiesci_cleaver.push(addEnemyEntry('Demon', zombiesci_demon_spawn_bias));
        // spawns_zombiesci_cleaver.push(addEnemyEntry('HDCasingBits', zombiesci_casings_spawn_bias));
        // spawns_zombiesci_cleaver.push(addEnemyEntry('HDGoreBits', zombiesci_gore_spawn_bias));
        // spawns_zombiesci_cleaver.push(addEnemyEntry('HelmFrag', zombiesci_helmfrag_spawn_bias));
        // spawns_zombiesci_cleaver.push(addEnemyEntry('BlueFrag', zombiesci_bluefrag_spawn_bias));
        // addEnemy('Hideous_ZombieLadyCleaver', spawns_zombiesci_cleaver, zombiesci_persistent_spawning);

        // // Zombie Scientist Corpses
        // Array<ZSCSpawnEnemyEntry> spawns_zombiescicorpse_cleaver;
        // spawns_zombiescicorpse_cleaver.push(addEnemyEntry('HDCasingBits', zombiescicorpse_casings_spawn_bias));
        // spawns_zombiescicorpse_cleaver.push(addEnemyEntry('HDGoreBits', zombiescicorpse_gore_spawn_bias));
        // spawns_zombiescicorpse_cleaver.push(addEnemyEntry('HelmFrag', zombiescicorpse_helmfrag_spawn_bias));
        // spawns_zombiescicorpse_cleaver.push(addEnemyEntry('BlueFrag', zombiescicorpse_bluefrag_spawn_bias));
        // addEnemy('Dead_ZombieLadyCleaver', spawns_zombiescicorpse_cleaver, zombiescicorpse_persistent_spawning);

        // // Zombie Scientists
        // Array<ZSCSpawnEnemyEntry> spawns_zombiesci_knife;
        // spawns_zombiesci_knife.push(addEnemyEntry('Zombieman', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci_knife.push(addEnemyEntry('ShotgunGuy', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci_knife.push(addEnemyEntry('DoomImp', zombiesci_imp_spawn_bias));
        // spawns_zombiesci_knife.push(addEnemyEntry('Demon', zombiesci_demon_spawn_bias));
        // spawns_zombiesci_knife.push(addEnemyEntry('HDCasingBits', zombiesci_casings_spawn_bias));
        // spawns_zombiesci_knife.push(addEnemyEntry('HDGoreBits', zombiesci_gore_spawn_bias));
        // spawns_zombiesci_knife.push(addEnemyEntry('HelmFrag', zombiesci_helmfrag_spawn_bias));
        // spawns_zombiesci_knife.push(addEnemyEntry('BlueFrag', zombiesci_bluefrag_spawn_bias));
        // addEnemy('Hideous_ZombieLadyKnife', spawns_zombiesci_knife, zombiesci_persistent_spawning);

        // // Zombie Scientist Corpses
        // Array<ZSCSpawnEnemyEntry> spawns_zombiescicorpse_knife;
        // spawns_zombiescicorpse_knife.push(addEnemyEntry('HDCasingBits', zombiescicorpse_casings_spawn_bias));
        // spawns_zombiescicorpse_knife.push(addEnemyEntry('HDGoreBits', zombiescicorpse_gore_spawn_bias));
        // spawns_zombiescicorpse_knife.push(addEnemyEntry('HelmFrag', zombiescicorpse_helmfrag_spawn_bias));
        // spawns_zombiescicorpse_knife.push(addEnemyEntry('BlueFrag', zombiescicorpse_bluefrag_spawn_bias));
        // addEnemy('Dead_ZombieLadyKnife', spawns_zombiescicorpse_knife, zombiescicorpse_persistent_spawning);

        // // Zombie Scientists
        // Array<ZSCSpawnEnemyEntry> spawns_zombiesci_syringe;
        // spawns_zombiesci_syringe.push(addEnemyEntry('Zombieman', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci_syringe.push(addEnemyEntry('ShotgunGuy', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci_syringe.push(addEnemyEntry('DoomImp', zombiesci_imp_spawn_bias));
        // spawns_zombiesci_syringe.push(addEnemyEntry('Demon', zombiesci_demon_spawn_bias));
        // spawns_zombiesci_syringe.push(addEnemyEntry('HDCasingBits', zombiesci_casings_spawn_bias));
        // spawns_zombiesci_syringe.push(addEnemyEntry('HDGoreBits', zombiesci_gore_spawn_bias));
        // spawns_zombiesci_syringe.push(addEnemyEntry('HelmFrag', zombiesci_helmfrag_spawn_bias));
        // spawns_zombiesci_syringe.push(addEnemyEntry('BlueFrag', zombiesci_bluefrag_spawn_bias));
        // addEnemy('Hideous_ZombieLadySyringe', spawns_zombiesci_syringe, zombiesci_persistent_spawning);

        // // Zombie Scientist Corpses
        // Array<ZSCSpawnEnemyEntry> spawns_zombiescicorpse_syringe;
        // spawns_zombiescicorpse_syringe.push(addEnemyEntry('HDCasingBits', zombiescicorpse_casings_spawn_bias));
        // spawns_zombiescicorpse_syringe.push(addEnemyEntry('HDGoreBits', zombiescicorpse_gore_spawn_bias));
        // spawns_zombiescicorpse_syringe.push(addEnemyEntry('HelmFrag', zombiescicorpse_helmfrag_spawn_bias));
        // spawns_zombiescicorpse_syringe.push(addEnemyEntry('BlueFrag', zombiescicorpse_bluefrag_spawn_bias));
        // addEnemy('Dead_ZombieLadySyringe', spawns_zombiescicorpse_syringe, zombiescicorpse_persistent_spawning);

        // // Zombie Scientists
        // Array<ZSCSpawnEnemyEntry> spawns_zombiesci_wrench;
        // spawns_zombiesci_wrench.push(addEnemyEntry('Zombieman', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci_wrench.push(addEnemyEntry('ShotgunGuy', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci_wrench.push(addEnemyEntry('DoomImp', zombiesci_imp_spawn_bias));
        // spawns_zombiesci_wrench.push(addEnemyEntry('Demon', zombiesci_demon_spawn_bias));
        // spawns_zombiesci_wrench.push(addEnemyEntry('HDCasingBits', zombiesci_casings_spawn_bias));
        // spawns_zombiesci_wrench.push(addEnemyEntry('HDGoreBits', zombiesci_gore_spawn_bias));
        // spawns_zombiesci_wrench.push(addEnemyEntry('HelmFrag', zombiesci_helmfrag_spawn_bias));
        // spawns_zombiesci_wrench.push(addEnemyEntry('BlueFrag', zombiesci_bluefrag_spawn_bias));
        // addEnemy('Hideous_ZombieLadyWrench', spawns_zombiesci_wrench, zombiesci_persistent_spawning);

        // // Zombie Scientist Corpses
        // Array<ZSCSpawnEnemyEntry> spawns_zombiescicorpse_wrench;
        // spawns_zombiescicorpse_wrench.push(addEnemyEntry('HDCasingBits', zombiescicorpse_casings_spawn_bias));
        // spawns_zombiescicorpse_wrench.push(addEnemyEntry('HDGoreBits', zombiescicorpse_gore_spawn_bias));
        // spawns_zombiescicorpse_wrench.push(addEnemyEntry('HelmFrag', zombiescicorpse_helmfrag_spawn_bias));
        // spawns_zombiescicorpse_wrench.push(addEnemyEntry('BlueFrag', zombiescicorpse_bluefrag_spawn_bias));
        // addEnemy('Dead_ZombieLadyWrench', spawns_zombiescicorpse_wrench, zombiescicorpse_persistent_spawning);

        // // Zombie Scientists
        // Array<ZSCSpawnEnemyEntry> spawns_zombiesci_axe;
        // spawns_zombiesci_axe.push(addEnemyEntry('Zombieman', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci_axe.push(addEnemyEntry('ShotgunGuy', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci_axe.push(addEnemyEntry('DoomImp', zombiesci_imp_spawn_bias));
        // spawns_zombiesci_axe.push(addEnemyEntry('Demon', zombiesci_demon_spawn_bias));
        // spawns_zombiesci_axe.push(addEnemyEntry('HDCasingBits', zombiesci_casings_spawn_bias));
        // spawns_zombiesci_axe.push(addEnemyEntry('HDGoreBits', zombiesci_gore_spawn_bias));
        // spawns_zombiesci_axe.push(addEnemyEntry('HelmFrag', zombiesci_helmfrag_spawn_bias));
        // spawns_zombiesci_axe.push(addEnemyEntry('BlueFrag', zombiesci_bluefrag_spawn_bias));
        // addEnemy('Hideous_ZombieAxe', spawns_zombiesci_axe, zombiesci_persistent_spawning);

        // // Zombie Scientist Corpses
        // Array<ZSCSpawnEnemyEntry> spawns_zombiescicorpse_axe;
        // spawns_zombiescicorpse_axe.push(addEnemyEntry('HDCasingBits', zombiescicorpse_casings_spawn_bias));
        // spawns_zombiescicorpse_axe.push(addEnemyEntry('HDGoreBits', zombiescicorpse_gore_spawn_bias));
        // spawns_zombiescicorpse_axe.push(addEnemyEntry('HelmFrag', zombiescicorpse_helmfrag_spawn_bias));
        // spawns_zombiescicorpse_axe.push(addEnemyEntry('BlueFrag', zombiescicorpse_bluefrag_spawn_bias));
        // addEnemy('Dead_ZombieAxe', spawns_zombiescicorpse_axe, zombiescicorpse_persistent_spawning);

        // // Zombie Scientists
        // Array<ZSCSpawnEnemyEntry> spawns_zombiesci_crowbar;
        // spawns_zombiesci_crowbar.push(addEnemyEntry('Zombieman', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci_crowbar.push(addEnemyEntry('ShotgunGuy', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci_crowbar.push(addEnemyEntry('DoomImp', zombiesci_imp_spawn_bias));
        // spawns_zombiesci_crowbar.push(addEnemyEntry('Demon', zombiesci_demon_spawn_bias));
        // spawns_zombiesci_crowbar.push(addEnemyEntry('HDCasingBits', zombiesci_casings_spawn_bias));
        // spawns_zombiesci_crowbar.push(addEnemyEntry('HDGoreBits', zombiesci_gore_spawn_bias));
        // spawns_zombiesci_crowbar.push(addEnemyEntry('HelmFrag', zombiesci_helmfrag_spawn_bias));
        // spawns_zombiesci_crowbar.push(addEnemyEntry('BlueFrag', zombiesci_bluefrag_spawn_bias));
        // addEnemy('Hideous_ZombieCrowbar', spawns_zombiesci_crowbar, zombiesci_persistent_spawning);

        // // Zombie Scientist Corpses
        // Array<ZSCSpawnEnemyEntry> spawns_zombiescicorpse_crowbar;
        // spawns_zombiescicorpse_crowbar.push(addEnemyEntry('HDCasingBits', zombiescicorpse_casings_spawn_bias));
        // spawns_zombiescicorpse_crowbar.push(addEnemyEntry('HDGoreBits', zombiescicorpse_gore_spawn_bias));
        // spawns_zombiescicorpse_crowbar.push(addEnemyEntry('HelmFrag', zombiescicorpse_helmfrag_spawn_bias));
        // spawns_zombiescicorpse_crowbar.push(addEnemyEntry('BlueFrag', zombiescicorpse_bluefrag_spawn_bias));
        // addEnemy('Dead_ZombieCrowbar', spawns_zombiescicorpse_crowbar, zombiescicorpse_persistent_spawning);

        // // Zombie Scientists
        // Array<ZSCSpawnEnemyEntry> spawns_zombiesci_hammer;
        // spawns_zombiesci_hammer.push(addEnemyEntry('Zombieman', zombiesci_zombieman_spawn_bias));
        // spawns_zombiesci_hammer.push(addEnemyEntry('ShotgunGuy', zombiesci_shotgunguy_spawn_bias));
        // spawns_zombiesci_hammer.push(addEnemyEntry('DoomImp', zombiesci_imp_spawn_bias));
        // spawns_zombiesci_hammer.push(addEnemyEntry('Demon', zombiesci_demon_spawn_bias));
        // spawns_zombiesci_hammer.push(addEnemyEntry('HDCasingBits', zombiesci_casings_spawn_bias));
        // spawns_zombiesci_hammer.push(addEnemyEntry('HDGoreBits', zombiesci_gore_spawn_bias));
        // spawns_zombiesci_hammer.push(addEnemyEntry('HelmFrag', zombiesci_helmfrag_spawn_bias));
        // spawns_zombiesci_hammer.push(addEnemyEntry('BlueFrag', zombiesci_bluefrag_spawn_bias));
        // addEnemy('Hideous_ZombieHammer', spawns_zombiesci_hammer, zombiesci_persistent_spawning);

        // // Zombie Scientist Corpses
        // Array<ZSCSpawnEnemyEntry> spawns_zombiescicorpse_hammer;
        // spawns_zombiescicorpse_hammer.push(addEnemyEntry('HDCasingBits', zombiescicorpse_casings_spawn_bias));
        // spawns_zombiescicorpse_hammer.push(addEnemyEntry('HDGoreBits', zombiescicorpse_gore_spawn_bias));
        // spawns_zombiescicorpse_hammer.push(addEnemyEntry('HelmFrag', zombiescicorpse_helmfrag_spawn_bias));
        // spawns_zombiescicorpse_hammer.push(addEnemyEntry('BlueFrag', zombiescicorpse_bluefrag_spawn_bias));
        // addEnemy('Dead_ZombieHammer', spawns_zombiescicorpse_hammer, zombiescicorpse_persistent_spawning);
    }

    // Random stuff, stores it and forces negative values just to be 0.
    bool giveRandom(int chance) {
        if (chance > -1) {
            let result = random(0, chance);

            if (hd_debug) console.printf("Rolled a "..(result + 1).." out of "..(chance + 1));

            return result == 0;
        }

        return false;
    }

    // Tries to replace the item during spawning.
    bool tryReplaceEnemy(ReplaceEvent e, string spawnName, int chance) {
        if (giveRandom(chance)) {
            if (hd_debug) console.printf(e.replacee.getClassName().." -> "..spawnName);

            e.replacement = spawnName;

            return true;
        }

        return false;
    }

    // Tries to create the Enemy via random spawning.
    bool tryCreateEnemy(Actor thing, string spawnName, int chance) {
        if (giveRandom(chance)) {
            if (hd_debug) console.printf(thing.getClassName().." + "..spawnName);

            Actor.Spawn(spawnName, thing.pos);

            return true;
        }

        return false;
    }

    override void worldLoaded(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();
    }

    override void checkReplacement(ReplaceEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();

        // If there's nothing to replace or if the replacement is final, quit.
        if (!e.replacee || e.isFinal) return;

        // If thing being replaced is blacklisted, quit.
        foreach (bl : blacklist) if (e.replacee is bl) return;

        string candidateName = e.replacee.getClassName();

        // If current map is Range, quit.
        if (level.MapName == 'RANGE') return;

        handleEnemyReplacements(e, candidateName);
    }

    override void worldThingSpawned(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();

        // If thing spawned doesn't exist, quit.
        if (!e.thing) return;

        // If thing spawned is blacklisted, quit.
        foreach (bl : blacklist) if (e.thing is bl) return;

        string candidateName = e.thing.getClassName();

        // If current map is Range, quit.
        if (level.MapName == 'RANGE') return;

        handleEnemySpawns(e.thing, candidateName);
    }

    private void handleEnemyReplacements(ReplaceEvent e, string candidateName) {

        // Checks if the level has been loaded more than 1 tic.
        bool prespawn = !(level.maptime > 1);

        // Iterates through the list of Enemy candidates for e.thing.
        foreach (enemySpawn : enemySpawnList) {

            if ((prespawn || enemySpawn.isPersistent) && enemySpawn.replaceEnemy) {
                foreach (spawnReplace : enemySpawn.spawnReplaces) {
                    if (spawnReplace.name ~== candidateName) {
                        if (hd_debug) console.printf("Attempting to replace "..candidateName.." with "..enemySpawn.spawnName.."...");

                        if (tryReplaceEnemy(e, enemySpawn.spawnName, spawnReplace.chance)) return;
                    }
                }
            }
        }
    }

    private void handleEnemySpawns(Actor thing, string candidateName) {

        // Checks if the level has been loaded more than 1 tic.
        bool prespawn = !(level.maptime > 1);

        // Iterates through the list of Enemy candidates for e.thing.
        foreach (enemySpawn : enemySpawnList) {

            // if an Enemy is owned or is an ammo (doesn't retain owner ptr),
            // do not replace it.
            let item = Inventory(thing);
            if (
                (prespawn || enemySpawn.isPersistent)
             && (!(item && item.owner) && prespawn)
             && !enemySpawn.replaceEnemy
            ) {
                foreach (spawnReplace : enemySpawn.spawnReplaces) {
                    if (spawnReplace.name ~== candidateName) {
                        if (hd_debug) console.printf("Attempting to spawn "..enemySpawn.spawnName.." with "..candidateName.."...");

                        if (tryCreateEnemy(thing, enemySpawn.spawnName, spawnReplace.chance)) return;
                    }
                }
            }
        }
    }
}
