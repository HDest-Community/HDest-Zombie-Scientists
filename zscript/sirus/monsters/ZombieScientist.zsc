class Hideous_ZombieScientist : HDHumanoid abstract
{
	HDPlayerPawn tat;

	int targetRange; property targetRange:targetRange;
	int latchRange; property latchRange:latchRange;
	int minDamage; property minDamage:minDamage;
	int maxDamage; property maxDamage:maxDamage;

    Sound missSound; property missSound:missSound;

	action void A_CheckLatch() {
		if (invoker.target && invoker.distance3d(invoker.target) < invoker.latchrange && random(0, 2)) invoker.SetStateLabel("latch");
	}

	action void A_CheckEndMelee() {
		if (invoker.target && invoker.distance3d(invoker.target) > invoker.meleerange) invoker.SetStateLabel("seerunnin");

		invoker.A_Jump(30, "meleeend");
	}

	action void A_Latch() {
		invoker.A_FaceTarget();
		invoker.A_ChangeVelocity(1, 0, 0, CVF_RELATIVE);

		if (!random(0, 19)) {
			invoker.A_Pain();
		} else if (!random(0, 9)) {
			invoker.A_StartSound(invoker.seesound, CHAN_WEAPON);
		}

		if (!random(0, 200)) {
			invoker.A_ChangeVelocity(-1, 0, 0, CVF_RELATIVE);
			invoker.A_ChangeVelocity(-2, 0, 2, CVF_RELATIVE, AAPTR_TARGET);
			invoker.SetStateLabel("see");
			return;
		}

		if (
			!invoker.target
			||invoker.target.health < 1
			||distance3d(invoker.target) > invoker.latchrange
		){
			invoker.SetStateLabel("meleeend");
			return;
		}

		invoker.A_ScaleVelocity(0.2, AAPTR_TARGET);
		invoker.A_ChangeVelocity(random(-1, 1), random(-1, 1), random(-1, 1), 0, AAPTR_TARGET);
		invoker.A_DamageTarget(random(0, 5), random(0, 3) ? "teeth" : "falling", 0, "none", "none", AAPTR_DEFAULT, AAPTR_DEFAULT);
	}

	action void A_Lunge() {
		invoker.A_FaceTarget(16, 16);
		invoker.bnodropoff = false;
		invoker.A_Changevelocity(1, 0, 0, CVF_RELATIVE);
		if (invoker.A_JumpIfTargetInLOS("null", 20, 0, 128)) {
			invoker.A_Vocalize(seesound);
			invoker.SetStateLabel("jump");
		}
	}

	override void CheckFootStepSound(){
		FootStepSound(self, 1.0, "enemy/zombiesci/step/dry", "enemy/zombiesci/step/wet");
	}

	default
	{
		//$Category "Monsters/Hideous Destructor"
		//$Title "Possessed Scientist"
		//$Sprite "FSZKA1"

		hdmobbase.shields 0;

		deathheight 14;
		health 100;
		gibhealth 130;
		height 54;
		radius 12;
		meleerange 40;
		scale 1.0;
		speed 16;
		mass 150;
		damage 10;
		
		painchance "bashing", 20;
		painchance 155;

		Hideous_ZombieScientist.targetrange 55;
		Hideous_ZombieScientist.latchrange 40;
		Hideous_ZombieScientist.mindamage 6;
		Hideous_ZombieScientist.maxdamage 10;

		tag "$TAG_ZOMBIESCIENTIST";
	}

	states
	{
		falldown:
			#### H 5;
			#### I 5 A_Scream();
			#### JJKKK 2 A_SetSize(-1, max(deathheight, height - 40));
			#### L 0 A_SetSize(-1, deathheight);
			#### L 10 A_KnockedDown();
			wait;
		standup:
			#### K 6;
			#### J 0 A_Jump(160, 2);
			#### J 0 A_StartSound(seesound, CHAN_VOICE);
			#### JI 4 A_Recoil(-0.3);
			#### HE 6;
			#### A 0 A_Jump(256, "see");
		spawn:
		spawn2:
			#### A 0 A_Jumpif (!bambush, "spawnwander");
			#### A 0 A_Jump(256, "spawnstill");
		spawnwander:
			#### A 1 A_HDLook();
			#### ABCD 8 A_Wander(CHF_DONTTURN);
			#### A 0 A_Jump(48, "spawnstill");
			#### A 0 A_Jump(48, 1);
			loop;
			#### A 0 A_StartSound(activesound, CHAN_VOICE);
		spawnstill:
			#### D 10 A_Jump(48, "spawnwander");
			#### A 0 A_HDLook();
			#### E 10 A_SetAngle(angle + random(-20, 20));
			#### EE 10 A_HDLook();
			loop;
		see:
			#### A 1 {
				// This checks if there's still a valid target
				// and if the target is the right class
				// (since monsters can infight)
				if (target && target is "HDPlayerPawn") {
					// this casts the variable correctly
					// since target is an Actor class
					// we need to specify that we're specifically
					// casting target using the HDPlayerPawn class	
					tat = HDPlayerPawn(target);
				}
			}
			#### A 1{bnopain=false;}
			goto seerunnin;
		seerunnin:
			#### ABCD 3 A_HDChase();
			#### A 1;
			#### A 0 {
				if (target && distance3d(target) > targetrange) SetStateLabel("seerunnin");
			}
			#### A 0 SetStateLabel("see");
		melee:
		meleeend:
			#### E 10;
			#### A 0 SetStateLabel("see");
		latch:
			#### FG 2 A_Latch();
			loop;
		missile:
			#### ABCD 2 A_Lunge();
			#### A 0 SetStateLabel("see");
		jump:
			#### E 3 A_FaceTarget(16, 16);
			#### E 3 A_Changevelocity(cos(pitch) * 2, 0, sin(-pitch) * 2, CVF_RELATIVE);
			#### E 2 A_FaceTarget(6, 6, FAF_TOP);
			#### E 1 A_ChangeVelocity(cos(pitch) * 8, 0, sin(-pitch - frandom(-4, 1)) * 8, CVF_RELATIVE);
			#### ABCD 2 A_HDChase();
			#### A 0 SetStateLabel("missile");
		pain:
			#### G 1 {
				if (health < 70) A_Jump(75, "falldown");
			}
			#### G 3 A_Pain();
			goto see;
		death:
		deathend:
			#### H 8;
			#### I 8 A_Scream();
			#### J 4 {
				A_SpawnItemEx(
					"MegaBloodSplatter", 0, 0, 4,
					vel.x, vel.y, vel.z + 3, 0,
					SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
				);
			}
			#### K 4 A_NoBlocking(false);
			#### L 4;
			#### MN 6;
		dead:
		death.spawndead:
			#### N 3 canraise A_Jumpif(floorz > pos.z - 6, 1);
			loop;
			#### N 5 canraise A_Jumpif(floorz <= pos.z - 6, "dead");
			loop;
		raise:
			#### N 4 A_SetTranslucent(1, 0);
			#### NMLKJIHG 5;
			goto checkraise;
		ungib:
			#### W 6{
				A_SpawnItemEx(
					"MegaBloodSplatter",
					0, 0, 4,
					vel.x, vel.y, vel.z + 3, 0,
					SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
				);
			}
			#### VU 8;
			#### TSR 6;
			#### Q 0 A_SetScale(1.0);
			#### QPO 4;
			goto checkraise;
		xdeath:
			#### O 1 A_XScream();
			#### O 0 A_NoBlocking();
			#### OPQR 3 spawn("MegaBloodSplatter", pos + (0, 0, 34), ALLOW_REPLACE);
			#### S 0 A_SetScale(0.6);
			#### STUV 2;
			goto xdead;
		xxxdeath:
			#### O 0 A_XScream();
			#### O 4 A_NoBlocking();
			#### PQRS 3;
			#### S 0 A_SetScale(0.6);
			#### TUV 3;
		xdead:
			#### W 5 canraise;
			loop;
	}
}

class Hideous_ZombieScientist_Female : Hideous_ZombieScientist abstract
{
	default
	{
		seesound "enemy/zombiesci/female/see";
		painsound "enemy/zombiesci/female/pain";
		deathsound "enemy/zombiesci/female/die";
		activesound "enemy/zombiesci/female/active";
		meleesound "enemy/zombiesci/female/melee";

        Hideous_ZombieScientist.missSound "enemy/zombiesci/female/miss";
	}
}

class Hideous_ZombieScientist_Male : Hideous_ZombieScientist abstract
{
	default
	{
		seesound "enemy/zombiesci/male/see";
		painsound "enemy/zombiesci/male/pain";
		deathsound "enemy/zombiesci/male/die";
		activesound "enemy/zombiesci/male/active";
		meleesound "enemy/zombiesci/male/melee";

        Hideous_ZombieScientist.missSound "enemy/zombiesci/male/miss";
	}
}