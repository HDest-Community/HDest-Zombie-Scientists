class Hideous_ZombieScientist : HDHumanoid abstract {

    HDPlayerPawn tat;

    int targetRange; property targetRange:targetRange;
    int latchRange; property latchRange:latchRange;
    int minDamage; property minDamage:minDamage;
    int maxDamage; property maxDamage:maxDamage;

    Name dropName; property dropName:dropName;

    action void A_WeaponAttack(int damageMulti, string damageType, float latchChance = 0.333) {
        invoker.A_FireballerScratch(null, random(invoker.minDamage, invoker.maxDamage) * damageMulti, ballchance: 0, damagetype: damageType);
        A_CheckLatch(latchChance);
        A_CheckEndMelee();
    }

    action void A_CheckLatch(float latchChance = 0.333) {
        if (
            target
            && Distance3d(target) < invoker.latchrange
            && frandom(0, 1) < latchChance
        ) {
            SetStateLabel("latch");
        }
    }

    action void A_CheckEndMelee() {
        if (
            target
            && Distance3d(target) > meleerange
        ) {
            SetStateLabel("seerunnin");
        }

        A_Jump(30, "meleeend");
    }

    action void A_Latch(int dmgMulti, string damageType) {
        A_FaceTarget();
        A_ChangeVelocity(1, 0, 0, CVF_RELATIVE);

        // Sounds of struggle
        if (!random(0, 19)) {
            invoker.A_Vocalize(painsound);
        } else if (!random(0, 9)) {
            invoker.A_Vocalize(seesound);
        }

        // 0.5% chance to detach
        if (!random(0, 200)) {
            A_ChangeVelocity(-1, 0, 0, CVF_RELATIVE);
            A_ChangeVelocity(-2, 0, 2, CVF_RELATIVE, AAPTR_TARGET);
            SetStateLabel("meleeend");
            return;
        }

        // If target is dead or too far, detach
        if (
            !target
            || target.health < 1
            || Distance3d(target) > invoker.latchrange
        ){
            SetStateLabel("meleeend");
            return;
        }

        // Deal Latch Attack Damage
        A_ScaleVelocity(0.2, AAPTR_TARGET);
        A_StartSound(meleesound, CHAN_WEAPON);
        A_ChangeVelocity(random(-1, 1), random(-1, 1), random(-1, 1), 0, AAPTR_TARGET);
        A_DamageTarget(random(invoker.minDamage, invoker.maxDamage) * dmgMulti, damageType, 0, "none", "none", AAPTR_DEFAULT, AAPTR_DEFAULT);
    }

    action void A_Lunge() {
        A_FaceTarget(16, 16);
        bnodropoff = false;
        A_Changevelocity(1, 0, 0, CVF_RELATIVE);
        if (A_JumpIfTargetInLOS("null", 20, 0, 128)) {
            invoker.A_Vocalize(seesound);
            SetStateLabel("jump");
        }
    }

    override void CheckFootStepSound() {
        FootStepSound(self, 1.0, "enemy/zombiesci/step/dry", "enemy/zombiesci/step/wet");
    }

    override void DeathDrop() {
        Class<Actor> dropCls = dropName;
        if (dropCls && !bhasdropped) {
            bhasdropped = true;
            DropNewWeapon(dropName);
        }
    }

    default {
        //$Category "Monsters/Hideous Destructor"
        //$Title "Possessed Scientist"
        //$Sprite "FSZKA1"

        hdmobbase.shields 0;

        deathheight 14;
        health 100;
        gibhealth 130;
        height 54;
        radius 12;
        meleerange 40;
        scale 1.0;
        speed 16;
        mass 150;
        damage 10;
        
        painchance "bashing", 20;
        painchance 155;

        Hideous_ZombieScientist.targetrange 55;
        Hideous_ZombieScientist.latchrange 40;
        Hideous_ZombieScientist.mindamage 6;
        Hideous_ZombieScientist.maxdamage 10;

        tag "$TAG_ZOMBIESCIENTIST";
    }

    states {
        falldown:
            #### H 5;
            #### I 5 A_Scream();
            #### JJKKK 2 A_SetSize(-1, max(deathheight, height - 40));
            #### L 0 A_SetSize(-1, deathheight);
            #### L 10 A_KnockedDown();
            wait;
        standup:
            #### K 6;
            #### J 0 A_Jump(160, 2);
            #### J 0 A_Vocalize(seesound);
            #### JI 4 A_Recoil(-0.3);
            #### HE 6;
            goto see;
        spawn:
        spawn2:
            #### A 0 A_Jumpif (!bambush, "spawnwander");
            goto spawnstill;
        spawnwander:
            #### A 1 A_HDLook();
            #### ABCD 8 A_HDWander();
            #### A 0 A_Jump(48, "spawnstill");
            #### A 0 A_Jump(48, 1);
            loop;
            #### A 0 A_Vocalize(activesound);
        spawnstill:
            #### A 10 A_Jump(48, "spawnwander");
            #### E 0 A_HDLook();
            #### E 10 A_SetAngle(angle + random(-20, 20));
            #### EE 10 A_HDLook();
            loop;
        see:
            #### A 1 {
                // This checks if there's still a valid target
                // and if the target is the right class
                // (since monsters can infight)
                if (target is "HDPlayerPawn") {
                    // this casts the variable correctly
                    // since target is an Actor class
                    // we need to specify that we're specifically
                    // casting target using the HDPlayerPawn class    
                    tat = HDPlayerPawn(target);
                }
            }
            #### A 1{bnopain=false;}
            goto seerunnin;
        seerunnin:
            #### ABCD 3 A_HDChase();
            #### D 1;
            #### D 0 {
                if (target && Distance3d(target) > targetrange) SetStateLabel("seerunnin");
            }
            goto see;
        melee:
        meleeend:
            goto see;
        latch:
            #### F random(2, 4);
            #### G random(4, 8) A_Latch(1, random(0, 3) ? "teeth" : "falling");
            #### F random(2, 4);
            loop;
        missile:
            #### ABCD 2 A_Lunge();
            goto see;
        jump:
            #### A 3 A_FaceTarget(16, 16);
            #### B 3 A_Changevelocity(cos(pitch) * 2, 0, sin(-pitch) * 2, CVF_RELATIVE);
            #### C 2 A_FaceTarget(6, 6, FAF_TOP);
            #### D 1 A_ChangeVelocity(cos(pitch) * 8, 0, sin(-pitch - frandom(-4, 1)) * 8, CVF_RELATIVE);
            #### ABCD 2 A_HDChase();
            goto missile;
        pain:
            #### G 1 {
                if (health < 70) A_Jump(75, "falldown");
            }
            #### G 3 A_Vocalize(painsound);
            goto see;
        death:
        deathend:
            #### H 8;
            #### I 8 A_Scream();
            #### J 4 A_GibSplatter();
            #### K 4 A_NoBlocking(false);
            #### L 4;
            #### MN 6;
        dead:
        death.spawndead:
            #### N 3 canraise A_Jumpif(floorz > pos.z - 6, 1);
            loop;
            #### N 5 canraise A_Jumpif(floorz <= pos.z - 6, "dead");
            loop;
        raise:
            #### N 4 A_SetTranslucent(1, 0);
            #### NMLKJIHG 5;
            goto checkraise;
        ungib:
            #### W 6 A_GibSplatter();
            #### VU 8;
            #### TSR 6;
            #### Q 0 A_SetScale(1.0);
            #### QPO 4;
            goto checkraise;
        gib:
            #### O 1 A_XScream();
            #### O 0 A_NoBlocking();
            #### OPQR 3 A_GibSplatter();
            #### S 0 A_SetScale(0.6);
            #### STUV 2;
            goto gibbed;
        deadgib:
            #### O 0 A_XScream();
            #### O 4 A_NoBlocking();
            #### PQRS 3;
            #### S 0 A_SetScale(0.6);
            #### TUV 3;
        gibbed:
            #### W 5 canraise;
            loop;
    }
}

mixin class FemaleScientist {
    default {
        seesound "enemy/zombiesci/female/see";
        painsound "enemy/zombiesci/female/pain";
        deathsound "enemy/zombiesci/female/die";
        activesound "enemy/zombiesci/female/active";
        meleesound "enemy/zombiesci/female/melee";
    }
}

mixin class MaleScientist {
    default {
        seesound "enemy/zombiesci/male/see";
        painsound "enemy/zombiesci/male/pain";
        deathsound "enemy/zombiesci/male/die";
        activesound "enemy/zombiesci/male/active";
        meleesound "enemy/zombiesci/male/melee";
    }
}
